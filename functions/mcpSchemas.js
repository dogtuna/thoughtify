import { z } from "zod";

const contactSchema = z.object({
  name: z.string(),
  role: z.string(),
});

const toolSchemas = {
  generateTrainingPlan: z.object({ prompt: z.string() }),
  generateStudyMaterial: z.object({ topic: z.string() }),
  generateCourseOutline: z.object({ topic: z.string() }),
  generateAssessment: z.object({ topic: z.string() }),
  generateLessonContent: z.object({ topic: z.string() }),
  generateClarifyingQuestions: z.object({
    businessGoal: z.string(),
    audienceProfile: z.string().optional(),
    sourceMaterial: z.string().optional(),
    projectConstraints: z.string().optional(),
    keyContacts: z.array(contactSchema).optional(),
  }),
  generateProjectBrief: z.object({
    businessGoal: z.string(),
    audienceProfile: z.string().optional(),
    sourceMaterial: z.string().optional(),
    projectConstraints: z.string().optional(),
    keyContacts: z.array(contactSchema).optional(),
    clarifyingQuestions: z.array(z.any()).optional(),
    clarifyingAnswers: z.array(z.any()).optional(),
  }),
  generateStatusUpdate: z.object({
    audience: z.string().optional(),
    today: z.string().optional(),
    previousUpdateSummary: z.string().optional(),
    newStakeholderAnswers: z.string().optional(),
    newDocuments: z.string().optional(),
    projectBaseline: z.string().optional(),
    allOutstandingTasks: z.string().optional(),
  }),
  generateLearningStrategy: z.object({
    projectBrief: z.string(),
    businessGoal: z.string().optional(),
    audienceProfile: z.string().optional(),
    projectConstraints: z.string().optional(),
    keyContacts: z.array(contactSchema).optional(),
    sourceMaterial: z.string().optional(),
    clarifyingQuestions: z.array(z.any()).optional(),
    clarifyingAnswers: z.array(z.any()).optional(),
    personaCount: z.number().optional(),
  }),
  generateContentAssets: z.object({
    ldd: z.any(),
    component: z.string().optional(),
    components: z.array(z.string()).optional(),
    jobId: z.string().optional(),
  }),
  generateLearnerPersona: z.object({
    projectBrief: z.string(),
    businessGoal: z.string().optional(),
    audienceProfile: z.string().optional(),
    projectConstraints: z.string().optional(),
    keyContacts: z.array(contactSchema).optional(),
    sourceMaterial: z.string().optional(),
    existingMotivationKeywords: z.array(z.string()).optional(),
    existingChallengeKeywords: z.array(z.string()).optional(),
    existingLearningPreferenceKeywords: z.array(z.string()).optional(),
    refreshField: z.string().optional(),
    personaType: z.string().optional(),
    existingTypes: z.array(z.string()).optional(),
    selectedTraits: z.array(z.string()).optional(),
  }),
  generateHierarchicalOutline: z.object({
    projectBrief: z.string(),
    learningObjectives: z.any(),
    businessGoal: z.string().optional(),
    audienceProfile: z.string().optional(),
    projectConstraints: z.string().optional(),
    selectedModality: z.string().optional(),
    blendModalities: z.array(z.string()).optional(),
    sourceMaterial: z.string().optional(),
    keyContacts: z.array(contactSchema).optional(),
  }),
  generateLearningDesignDocument: z.object({
    projectBrief: z.string(),
    businessGoal: z.string().optional(),
    audienceProfile: z.string().optional(),
    projectConstraints: z.string().optional(),
    selectedModality: z.string().optional(),
    blendModalities: z.array(z.string()).optional(),
    learningObjectives: z.any().optional(),
    courseOutline: z.string().optional(),
    trainingPlan: z.string().optional(),
    sourceMaterial: z.string().optional(),
    keyContacts: z.array(contactSchema).optional(),
  }),
  generateStoryboard: z.object({
    topic: z.string(),
    targetAudience: z.string().optional(),
  }),
  generateInitialInquiryMap: z.object({
    brief: z.string(),
    uid: z.string(),
    initiativeId: z.string(),
    documents: z.string().optional(),
    answers: z.string().optional(),
  }),
  generateAvatar: z.object({
    name: z.string(),
    motivation: z.string().optional(),
    challenges: z.string().optional(),
    ageRange: z.string().optional(),
    techProficiency: z.string().optional(),
    educationLevel: z.string().optional(),
    learningPreferences: z.string().optional(),
    seedExtra: z.string().optional(),
  }),
  savePersona: z.object({
    initiativeId: z.string(),
    personaId: z.string(),
    persona: z.object({ type: z.string() }).passthrough(),
  }),
  generateInvitation: z.object({
    businessName: z.string(),
    businessEmail: z.string().email(),
  }),
  sendEmailBlast: z.object({
    subject: z.string(),
    message: z.string(),
    __token: z.string().optional(),
  }),
  sendEmailReply: z.object({
    recipientEmail: z.string().email(),
    subject: z.string(),
    message: z.string(),
  }),
  triggerZap: z.object({
    zapUrl: z.string().url(),
    payload: z.any().optional(),
  }),
};

export default toolSchemas;
